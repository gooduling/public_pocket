{"version":3,"sources":["registerServiceWorker.js","components/PPayment.jsx","components/PocketsList.jsx","components/Home.jsx","components/PaymentForm.jsx","components/CreatePocket.jsx","components/PocketPage.jsx","components/App.jsx","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","styles","block","maxWidth","grayblock","padding","background","toggle","marginBottom","CreateResult","Date","toLocaleString","props","react_default","a","createElement","style","params","id","Link","to","concat","RaisedButton_default","primary","label","PocketsList","_ref","pockets","Table","displaySelectAll","adjustForCheckbox","enableSelectAll","displayRowCheckbox","map","p","i","orgName","Home","demoId","className","PocketsList_PocketsList","React","Component","exampleState","name","description","finishDate","finishSum","isPublic","payments","reports","login","password","orgContacts","cardNumber","group","isTimeLimited","isSumLimited","emptyState","CreatePocket","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","objectSpread","onChange","isChecked","_ref$target","target","value","setState","defineProperty","save","Math","floor","random","onSave","toString","history","push","inherits","createClass","key","_this2","FlatButton_default","onClick","TextField_default","floatingLabelText","multiLine","Toggle_default","toggled","onToggle","withReport","disabled","type","Checkbox_default","checked","Papa","parse","download","complete","results","pathMap","/","/policy","/candidates","/quest","policy","text","Header","withRouter","AppBar_default","title","pathname","onTitleClick","titleStyle","cursor","showMenuIconButton","App","JSON","sessionStorage","getItem","createPocket","pocket","newPockets","toConsumableArray","saveInStorage","createPayment","pocketId","payment","find","setTimeout","setItem","stringify","_this$state$policy","MuiThemeProvider_default","Switch","Route","exact","path","component","Home_Home","assign","CreatePocket_CreatePocket","render","HashRouter","App_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e43c03b0.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport {RadioButton, RadioButtonGroup} from 'material-ui/RadioButton';\nimport {Link} from 'react-router-dom'\nimport {Table, TableBody, TableHeader, TableHeaderColumn, TableRow, TableRowColumn,} from 'material-ui/Table';\n\nconst styles = {\n    block: {\n        maxWidth: 250,\n    },\n    grayblock: {\n        padding: 20,\n        'background': '#eee'\n\n    },\n    toggle: {\n        marginBottom: 16,\n    },\n};\n\n// export class PPocketUI extends Component {\nconst reports = [\n    {\n        time: new Date().toLocaleString('ru'),\n        goal: 'Купівля інструментів',\n        sum: 400,\n        comment: 'напр. лінк на скан чеків'\n    },\n    {\n        time: new Date().toLocaleString('ru'),\n        goal: 'Купівля дерев',\n        sum: 200,\n        comment: 'напр. лінк на скан чеків'\n    },\n    {\n        time: new Date().toLocaleString('ru'),\n        goal: 'Купівля квітів',\n        sum: 810,\n        comment: 'напр. лінк на скан чеків'\n    }\n]\nexport const EditGamanec = (props) => (\n    <div>\n        <h2>Редагування кампанії</h2><br/><br/>\n        <div>\n            <h3>Статус кампанії</h3>\n            <RadioButtonGroup name=\"shipSpeed\" defaultSelected=\"not_light\">\n                <RadioButton\n                    value=\"not_light\"\n                    label=\"Активна\"\n                    style={styles.radioButton}\n                />\n                <RadioButton\n                    value=\"light\"\n                    label=\"Призупинена\"\n                    style={styles.radioButton}\n                />\n                <RadioButton\n                    value=\"3_light\"\n                    label=\"Зачинена\"\n                    style={styles.radioButton}\n                />\n            </RadioButtonGroup>\n            <br/><br/>\n            <h3>Звіти</h3>\n            <Table\n                selectable={false}\n                multiSelectable={false}\n            >\n                <TableHeader\n                    displaySelectAll={false}\n                    adjustForCheckbox={false}\n                    enableSelectAll={false}\n                >\n                    <TableRow>\n                        <TableHeaderColumn>№</TableHeaderColumn>\n                        <TableHeaderColumn>Дата</TableHeaderColumn>\n                        <TableHeaderColumn>Сума</TableHeaderColumn>\n                        <TableHeaderColumn>Призначення</TableHeaderColumn>\n                        <TableHeaderColumn>Додатково</TableHeaderColumn>\n                    </TableRow>\n                </TableHeader>\n                <TableBody displayRowCheckbox={false}>\n                    {reports.map((p,i) => (\n                        <TableRow key={i}>\n                            <TableRowColumn>{i+1}</TableRowColumn>\n                            <TableRowColumn>{new Date(p.time).toLocaleString(\"ru\")}</TableRowColumn>\n                            <TableRowColumn>{p.sum}</TableRowColumn>\n                            <TableRowColumn>{p.goal}</TableRowColumn>\n                            <TableRowColumn>{p.comment}</TableRowColumn>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n            <br/><br/>\n            <RaisedButton label=\"Додати звіт про витрати\"/><br/><br/><br/>\n\n            <Link to={`/pocket/${props.match.params.id}`}><RaisedButton label=\"Зберегти\" primary={true}/></Link>\n        </div>\n    </div>\n)\nexport const CreateResult = (props) => (\n    <div style={styles.grayblock}>\n        <h3>Гаманець збережено</h3>\n        <p>ID гаманця: <b>{props.match.params.id}</b></p>\n        <Link to={`/pocket/${props.match.params.id}`}><RaisedButton primary label=\"До сторінки гаманця\"/></Link>\n        &nbsp;&nbsp;\n        <Link to='/list'><RaisedButton label=\"До списку гаманців\"/></Link>\n    </div>\n)\nexport const PaymentResult = (props) => (\n    <div style={styles.grayblock}>\n        <h3>Дякуємо!</h3>\n        <p>Ваш платіж на користь гаманця {props.match.params.id} виконано успішно</p>\n        <Link to={`/pocket/${props.match.params.id}`}><RaisedButton primary  label=\"До сторінки гаманця\"/></Link>\n        &nbsp;&nbsp;\n        <Link to='/list'><RaisedButton label=\"До списку гаманців\"/></Link>\n    </div>\n)\n","import React from 'react';\nimport {Link} from 'react-router-dom'\nimport RaisedButton from 'material-ui/RaisedButton';\nimport Paper from 'material-ui/Paper';\nimport {\n    Table,\n    TableBody,\n    TableHeader,\n    TableHeaderColumn,\n    TableRow,\n    TableRowColumn,\n} from 'material-ui/Table';\n\nexport const PocketsList = ({pockets}) => (\n    <div>\n        <h3>Список Гаманців</h3>\n        <Table>\n            <TableHeader\n                displaySelectAll={false}\n                adjustForCheckbox={false}\n                enableSelectAll={false}\n            >\n                <TableRow>\n                    <TableHeaderColumn>№</TableHeaderColumn>\n                    <TableHeaderColumn>ID платежа</TableHeaderColumn>\n                    <TableHeaderColumn>Дата створення</TableHeaderColumn>\n                    <TableHeaderColumn>Власник</TableHeaderColumn>\n                    <TableHeaderColumn>Тип</TableHeaderColumn>\n                    <TableHeaderColumn></TableHeaderColumn>\n                </TableRow>\n            </TableHeader>\n            <TableBody displayRowCheckbox={false}>\n                {pockets.map((p,i) => (\n                    <TableRow>\n                        <TableRowColumn>{i+1}</TableRowColumn>\n                        <TableRowColumn>{p.id}</TableRowColumn>\n                        <TableRowColumn>10.09.2017 14:00</TableRowColumn>\n                        <TableRowColumn>{p.orgName}</TableRowColumn>\n                        <TableRowColumn>Публічний</TableRowColumn>\n                        <TableRowColumn>\n                            <Link to={`/pocket/${p.id}`}>\n                                <RaisedButton label=\"Переглянути\" primary={true}/>\n                            </Link>\n                        </TableRowColumn>\n                    </TableRow>\n                ))}\n            </TableBody>\n        </Table>\n        <Link to='/new'><RaisedButton label=\"Створити Прозорий Гаманець\" primary={true}/></Link><br/><br/>\n    </div>\n)","import React from 'react';\nimport {Link} from 'react-router-dom'\nimport RaisedButton from 'material-ui/RaisedButton';\nimport {PocketsList} from \"./PocketsList\";\n\nexport const Home = ({demoId, pockets}) => (\n    <div className='home page'>\n        <p><b className='bigFont'>Публічний гаманець</b> - це інструмент краудфандингу, що дозволяє зробити швидкий збір\n            грошей на картку прозорим і підзвітним.\n            <br/>\n            Якщо ви збираєте гроші на благодійність, або суспільні цілі, Публічний гаманець зможе стати вашою істотною\n            конкурентною перевагою, бо прозорість викликає в людях більшу довіру і збільшує кількість пожертувачів.\n            Людям буде набагато легше передати вам свої гроші, якщо вони зможуть на власні очі побачити, що жодна\n            зібрана копійка з вашого публічного бюджету не зможе загубитися і, ймовірно, буде Вами відзвітована.\n        </p>\n        <p>Цей демонстраційний інтерфейс дає приблизне уявлення як може виглядати користування Прозорим Гаманцем.</p>\n        <div className='buttons'>\n            <Link to='/new'><RaisedButton label=\"Створити Гаманець\" primary={true}/></Link>&nbsp;&nbsp;\n            {demoId && <Link to={`/pocket/${demoId}`}><RaisedButton label=\"Переглянути Гаманець\" primary={true}/></Link>}\n        </div>\n        <br/><br/><br/>\n        <PocketsList pockets={pockets}/>\n    </div>\n)","import React from 'react';\nimport TextField from 'material-ui/TextField';\nimport Checkbox from 'material-ui/Checkbox';\nimport RaisedButton from 'material-ui/RaisedButton';\n\nexport class PaymentForm extends React.Component {\n    state = {\n        pocketId: this.props.match.params.id,\n        paymentId: '',\n        time: '',\n        from: '',\n        comment: '',\n        sum: 0,\n        subscribe: false,\n        cardNumber: '',\n        email: ''\n    }\n\n    onChange = ({target: {name, value}}, isChecked) => {\n        console.log(name, value, isChecked)\n        this.setState({[name]: value || isChecked})\n    }\n\n    pay = () => {\n        const pocketId = this.props.match.params.id;\n        const paymentId = 10000 + Math.floor(Math.random() * 89999);\n        this.props.onPay(pocketId, {...this.state, paymentId, time: new Date()});\n        this.props.history.push('/payment_result/' + pocketId)\n    }\n\n    render() {\n        console.log('pay', this.props)\n        return (\n            <div>\n                <h2>Сплатити на користь кампанії {this.props.match.params.id}</h2>\n                <br/><br/><br/><br/>\n                <div>\n                    <TextField\n                        name=\"cardNumber\"\n                        value={this.state.cardNumber}\n                        floatingLabelText=\"Номер Картки\"\n                        onChange={this.onChange}\n                    /><br/><br/>\n                    <TextField\n                        name=\"sum\"\n                        type=\"number\"\n                        value={this.state.sum}\n                        floatingLabelText=\"Сума\"\n                        onChange={this.onChange}\n                    /><br/><br/>\n                    <TextField\n                        name=\"from\"\n                        value={this.state.from}\n                        floatingLabelText=\"Від кого\"\n                        onChange={this.onChange}\n                    /><br/><br/>\n                    <TextField\n                        name=\"comment\"\n                        value={this.state.comment}\n                        floatingLabelText=\"Коментар\"\n                        multiLine={true}\n                        onChange={this.onChange}\n                    /><br/><br/>\n                    <Checkbox\n                        name=\"subscribe\"\n                        label=\"Подписаться на сообщения о статусе сбора?\"\n                        checked={this.state.subscribe}\n                        onCheck={this.onChange}\n                    />\n                    {this.state.subscribe &&\n                    (<TextField\n                        name='email'\n                        value={this.state.email}\n                        floatingLabelText=\"Email\"\n                        onChange={this.onChange}\n                    />)}\n                    <br/><br/>\n                </div>\n                <RaisedButton label=\"Сплатити\" primary={true} onClick={this.pay}/>\n            </div>\n        )\n\n    }\n}","import React from 'react';\nimport TextField from 'material-ui/TextField';\nimport Checkbox from 'material-ui/Checkbox';\nimport Toggle from 'material-ui/Toggle';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport FlatButton from 'material-ui/FlatButton';\n\n\nconst styles = {\n    block: {\n        maxWidth: 250,\n    },\n    toggle: {\n        marginBottom: 16,\n    },\n};\n\nconst exampleState = {\n    name: 'Прибирання двору',\n    description: 'Для вивезення мусору нам потрібно зібрати 1500 грн. Просимо кожного мешканця здати по 50грн. В коментаріях до платежу зазначайте будь ласка своє призвище',\n    id: 'S33443',\n    finishDate: '25/09/2018',\n    finishSum: 1500,\n    isPublic: true,\n    payments: [],\n    reports: [],\n    login: 'salt',\n    password: 'salt',\n    orgName: 'Ірина Журба',\n    orgContacts: 'example@gmail.com',\n    cardNumber: '55665757',\n    group: 'Будинок №56',\n    isTimeLimited: true,\n    isSumLimited: true\n}\nconst emptyState = {\n    name: '',\n    description: '',\n    id: '',\n    finishDate: '',\n    finishSum: '',\n    isPublic: true,\n    payments: [],\n    reports: [],\n    login: 'salt',\n    password: 'salt',\n    orgName: '',\n    orgContacts: '',\n    cardNumber: '',\n    group: '',\n    isTimeLimited: true,\n    isSumLimited: true\n}\n\nexport class CreatePocket extends React.Component {\n    state = {...emptyState}\n\n    onChange = ({target: {name, value}}, isChecked) => {\n        this.setState({[name]: value || isChecked})\n    }\n\n    save = () => {\n        const id = 1000 + Math.floor(Math.random() * 8999);\n        this.props.onSave({...this.state, id: id.toString()});\n        this.props.history.push('/result/' + id)\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    DEMO:\n                    <FlatButton primary label=\"Заповнити поля прикладом\" onClick={() => this.setState(exampleState)}/>\n                    <FlatButton primary label=\"Очистити поля\" onClick={() => this.setState(emptyState)}/>\n                </div>\n                <TextField\n                    name='name'\n                    value={this.state.name}\n                    floatingLabelText=\"Назва гаманця\"\n                    onChange={this.onChange}\n                /><br/><br/>\n                <TextField\n                    name=\"description\"\n                    value={this.state.description}\n                    floatingLabelText=\"Опис\"\n                    multiLine={true}\n                    onChange={this.onChange}\n                /><br/><br/>\n                <TextField\n                    name=\"orgName\"\n                    value={this.state.orgName}\n                    floatingLabelText=\"Дані організаторів\"\n                    onChange={this.onChange}\n                /><br/><br/>\n                <div style={styles.block}>\n                    <Toggle\n                        label=\"Чи є гаманець публічним\"\n                        name='isPublic'\n                        style={styles.toggle}\n                        toggled={this.state.isPublic}\n                        onToggle={this.onChange}\n                    /><br/>\n                    <Toggle\n                        name='withReport'\n                        label=\"Можливість додавати звіти\"\n                        style={styles.toggle}\n                        toggled={this.state.withReport}\n                        onToggle={this.onChange}\n                    /><br/>\n                    <Toggle\n                        name='isSumLimited'\n                        label=\"Збір з відкритою сумою\"\n                        style={styles.toggle}\n                        toggled={this.state.isSumLimited}\n                        onToggle={this.onChange}\n                    />\n                </div>\n                {this.state.isSumLimited && <div>\n                    <TextField\n                        name=\"finishSum\"\n                        value={this.state.finishSum}\n                        floatingLabelText=\"Збір з відкритою сумою\"\n                        onChange={this.onChange}\n                    /><br/></div>}\n                <div style={styles.block}>\n                    <Toggle\n                        name=\"isTimeLimited\"\n                        label=\"Термін кампанії обмежений датою\"\n                        style={styles.toggle}\n                        toggled={this.state.isTimeLimited}\n                        onToggle={this.onChange}\n                    />\n                </div>\n                {this.state.isTimeLimited && <div>\n                    <TextField\n                        name=\"finishDate\"\n                        value={this.state.finishDate}\n                        floatingLabelText=\"Кінцева дата збору\"\n                        disabled\n                    />\n                    <br/>\n                </div>}\n                <TextField\n                    name=\"cardNumber\"\n                    value={this.state.cardNumber}\n                    floatingLabelText=\"Номер карти для отримання\"\n                    onChange={this.onChange}\n                /><br/><br/>\n                <TextField\n                    name=\"orgContacts\"\n                    value={this.state.orgContacts}\n                    floatingLabelText=\"E-mail організатора (логін)\"\n                    onChange={this.onChange}\n                /><br/><br/>\n                <TextField\n                    name=\"password\"\n                    value={this.state.orgContacts}\n                    type=\"password\"\n                    floatingLabelText=\"пароль для керування гаманцем\"\n                /><br/><br/>\n                <Checkbox\n                    label=\"Підписатися на повідомлення про нові платежі\"\n                    checked={true}\n                />\n                <br/>\n                <br/>\n                <TextField\n                    name='group'\n                    value={this.state.group}\n                    floatingLabelText=\"Додаткові поля\"\n                    onChange={this.onChange}\n                /><br/><br/>\n                <RaisedButton disabled={this.state.name.length < 1} label=\"Створити гаманець\" primary={true} onClick={this.save}/>\n            </div>\n\n        )\n    }\n}","import React from 'react';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport FlatButton from 'material-ui/FlatButton';\nimport {Table, TableBody, TableHeader, TableHeaderColumn, TableRow, TableRowColumn,} from 'material-ui/Table';\nimport {Link} from 'react-router-dom'\nimport Paper from 'material-ui/Paper';\n\nconst styles = {\n    block: {\n        maxWidth: 250,\n    },\n    grayblock: {\n        padding: 20,\n        'background': '#eee'\n\n    },\n    toggle: {\n        marginBottom: 16,\n    },\n};\n\n// export class PPocketUI extends Component {\nexport class PocketPage extends React.Component {\n    state = {\n        showPayments: false\n    }\n\n    render() {\n        const {match: {params}, pockets, history} = this.props;\n        const pocket = pockets.find(p => p.id.toString() === params.id.toString());\n        if (!pocket) {\n            history.push('/');\n            return null;\n        }\n        const sum = (arr) => arr.reduce((sum, current) => sum + parseInt(current.sum), 0);\n        return (\n            <div>\n                <div>\n                    <Paper zDepth={2} style={{padding: 20, marginBottom: 60}}>\n                        <span style={{'color': 'lightgreen', float: 'right'}}>Збір триває</span>\n                        <h2>{pocket.name}</h2>\n                        <p><i>{pocket.description}</i></p>\n                        <p>Статус: Публічний збір / Збір\n                            зі звітом</p>\n                        <p>Відповідальна особа: {pocket.orgName}</p>\n                        <p>Термін закінчення: {pocket.finishDate}</p>\n                        <p>Завершити збір при досягненні суми: {pocket.finishSum} грн.</p>\n                        <hr/>\n                        <h3>Зібрано: {sum(pocket.payments)} грн.</h3>\n                        <h4>Звіти надані на суму: {sum(pocket.reports)} грн. (Не\n                            відзвітовано: {sum(pocket.payments) - sum(pocket.reports)} грн)</h4>\n                        <p style={{fontSize: '0.8em', color: '#444', textAlign: 'right'}}>Власник гаманця? <Link to={'/edit/' + pocket.id}><FlatButton secondary={true}\n                                                                                        label=\"Додати Звіт / Редагувати\"/></Link></p>\n                    </Paper>\n                    <h3>Наявні платежі</h3>\n                    <hr/>\n                    <Table\n                        selectable={false}\n                        multiSelectable={false}\n                    >\n                        <TableHeader\n                            displaySelectAll={false}\n                            adjustForCheckbox={false}\n                            enableSelectAll={false}\n                        >\n                            <TableRow>\n                                <TableHeaderColumn>№</TableHeaderColumn>\n                                <TableHeaderColumn>ID платежа</TableHeaderColumn>\n                                <TableHeaderColumn>Дата</TableHeaderColumn>\n                                <TableHeaderColumn>Від кого</TableHeaderColumn>\n                                <TableHeaderColumn>Коментар</TableHeaderColumn>\n                                <TableHeaderColumn>Сума</TableHeaderColumn>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody displayRowCheckbox={false}>\n                            {pocket.payments.map((p,i) => (\n                                <TableRow key={i}>\n                                    <TableRowColumn>{i+1}</TableRowColumn>\n                                    <TableRowColumn>{p.paymentId}</TableRowColumn>\n                                    <TableRowColumn>{new Date(p.time).toLocaleString(\"ru\")}</TableRowColumn>\n                                    <TableRowColumn>{p.from}</TableRowColumn>\n                                    <TableRowColumn>{p.comment}</TableRowColumn>\n                                    <TableRowColumn>{p.sum}</TableRowColumn>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <hr/>\n                    <h3>Зібрано: {sum(pocket.payments)} грн.</h3>\n                    <br/>\n                    <React.Fragment>\n                        {pocket.reports.length > 0 && (<FlatButton\n                            label=\"Показати Звіти\"\n                            secondary={true}\n                            onClick={() => this.setState({showPayments: !this.state.showPayments})}\n                        />)}\n                        {this.state.showPayments && pocket.reports.map(report => <div>{report.amount}</div>)}\n                    </React.Fragment>\n                    <br/>\n                    <Link to={'/payment/'+pocket.id}><RaisedButton label=\"Зробити внесок\" primary/></Link>\n                    <br/><br/>\n\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {withRouter} from 'react-router-dom'\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\nimport {CreateResult, EditGamanec, PaymentResult} from \"./PPayment\";\nimport {Home} from \"./Home\";\nimport {PaymentForm, } from \"./PaymentForm\";\nimport {PocketsList} from \"./PocketsList\";\nimport {CreatePocket} from \"./CreatePocket\";\nimport {PocketPage} from \"./PocketPage\";\nimport {Route, Switch} from 'react-router-dom'\nimport Papa from 'papaparse'\n\nPapa.parse(\"/policy_sample.csv\", {\n\tdownload: true,\n\tcomplete: function(results) {\n\t\tconsole.log(results);\n\t}\n});\n\nconst pathMap = {\n    '/': ' - Головна сторінка',\n    '/policy': ' - Політики',\n    '/candidates': ' - Кандидати',\n    '/quest': ' - Тестування'\n};\nexport const policy = [\n    {\n        name: 'Здоровля',\n        text: 'text'\n    }\n]\n\nconst AppBarHeader = (props) => {\n    return (\n        <AppBar\n            title={`Публічний Гаманець ${pathMap[props.location.pathname] || ''}`}\n            onTitleClick={() => props.history.push('/')}\n            titleStyle={{cursor: 'pointer'}}\n            showMenuIconButton={false}\n        />\n    )\n};\nconst Header = withRouter(AppBarHeader);\n\nexport class App extends React.Component {\n    state = JSON.parse(sessionStorage.getItem('ppocket')) || {\n        policy\n    };\n\n    createPocket = (pocket) => {\n        let newPockets = [...(this.state.pockets || [])];\n        newPockets.push(pocket);\n        this.setState({pockets: newPockets});\n        this.saveInStorage()\n    };\n\n    createPayment = (pocketId, payment) => {\n        let newPockets = [...this.state.pockets];\n        const pocket = newPockets.find(p => p.id == pocketId);\n        if (pocket) {\n            pocket.payments.push(payment);\n            this.setState({pockets: newPockets})\n        }\n        this.saveInStorage()\n    };\n    componentDidMount() {\n\n    }\n\n    componentWillUnmount() {\n        this.saveInStorage()\n    }\n    saveInStorage = () => setTimeout(() => sessionStorage.setItem('ppocket', JSON.stringify(this.state)) , 100);\n\n    render() {\n        const { policy = [] } = this.state;\n        return (\n            <MuiThemeProvider>\n                <div>\n                    <Header/>\n                    <div className='page'>\n                        <Switch>\n                            <Route exact path='/' component={(props)=><Home {...props} pockets={policy}/>}/>\n                            <Route path='/policy'\n                                   component={(props) => <CreatePocket {...props} onSave={this.createPocket}/>}/>                        \n                            <Route path='/quest' component={CreateResult}/>                    \n                            <Route path='/candidates' component={(props) => <PocketsList {...{...props, policy}}/>}/>\n                        </Switch>\n                    </div>\n                </div>\n            </MuiThemeProvider>\n        )\n    }\n};","import React from 'react';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\nimport {render} from 'react-dom'\nimport {HashRouter} from 'react-router-dom'\nimport {App} from \"./components/App\"\n\nrender(<HashRouter><App/></HashRouter>, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}